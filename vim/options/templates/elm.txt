module Main exposing (Model, Msg(..), init, main, subscriptions, update, view, viewLink)

import Browser
import Browser.Navigation as Nav
import Html exposing (..)
import Html.Attributes exposing (..)
import Url



-- MAIN


main : Program () Model Msg
main =
    Browser.application
        { init = init
        , view = view
        , update = update
        , subscriptions = subscriptions
        , onUrlChange = UrlChanged
        , onUrlRequest = LinkClicked
        }



-- MODEL


type alias Model =
    { key : Nav.Key
    , url : Url.Url
    }


init : () -> Url.Url -> Nav.Key -> ( Model, Cmd Msg )
init flags url key =
    ( Model key url, Cmd.none )



-- UPDATE


type Msg
    = LinkClicked Browser.UrlRequest
    | UrlChanged Url.Url


update : Msg -> Model -> ( Model, Cmd Msg )
update msg model =
    case msg of
        LinkClicked urlRequest ->
            case urlRequest of
                Browser.Internal url ->
                    ( model, Nav.pushUrl model.key (Url.toString url) )

                Browser.External href ->
                    ( model, Nav.load href )

        UrlChanged url ->
            ( { model | url = url }
            , Cmd.none
            )



-- SUBSCRIPTIONS


subscriptions : Model -> Sub Msg
subscriptions _ =
    Sub.none



-- VIEW


type alias Page =
    { title : String
    , url : String
    , view : Model -> List (Html Msg)
    }


pages : List Page
pages =
    [ { title = "Home", url = "/main", view = viewHome }
    , { title = "Profile", url = "/profile", view = viewProfile }
    ]


view : Model -> Browser.Document Msg
view model =
    { title = "Home"
    , body =
        let
            viewPage =
                pages
                    |> List.filter (\page -> page.url == model.url.path)
                    |> List.head
                    |> Maybe.map .view
                    |> Maybe.withDefault viewHome
        in
        viewPage model
    }


viewHome : Model -> List (Html Msg)
viewHome model =
    [ h1 [] [ text "Home" ]
    , viewTOC model
    ]


viewProfile : Model -> List (Html Msg)
viewProfile model =
    [ h1 [] [ text "Profile" ]
    , viewTOC model
    ]


viewTOC : Model -> Html msg
viewTOC model =
    ul []
        (List.map viewLink pages)


viewLink : Page -> Html msg
viewLink page =
    li [] [ a [ href page.url ] [ text page.title ] ]

